{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsx jsx */\nimport { useRef, useState } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { jsx } from 'theme-ui';\nimport { Container, Flex, Box, Button, Input, Text, Heading } from 'theme-ui';\nexport default function Subscribe() {\n  // 1. Create a reference to the input so we can fetch/clear it's value.\n  const inputEl = useRef(null); // 2. Hold a status in state to handle the response from our API.\n\n  const {\n    0: status,\n    1: setStatus\n  } = useState({\n    submitted: false,\n    submitting: false,\n    info: {\n      error: false,\n      msg: null\n    }\n  });\n\n  const handleMailChimpResponse = (errorMsg, successMsg) => {\n    if (errorMsg) {\n      // 4. If there was an error, update the message in state.\n      setStatus({\n        info: {\n          error: true,\n          msg: errorMsg\n        }\n      });\n      return;\n    } // 5. Clear the input value and show a success message.\n\n\n    setStatus({\n      submitted: true,\n      submitting: false,\n      info: {\n        error: false,\n        msg: successMsg\n      }\n    });\n    inputEl.current.value = '';\n  };\n\n  const handleSendGridResponse = (status, msg) => {\n    if (status === 200) {\n      // 5. Clear the input value and show a success message.\n      setStatus({\n        submitted: true,\n        submitting: false,\n        info: {\n          error: false,\n          msg: msg\n        }\n      });\n      inputEl.current.value = '';\n    } else {\n      setStatus({\n        info: {\n          error: true,\n          msg: msg\n        }\n      });\n    }\n  };\n\n  const subscribe = async e => {\n    e.preventDefault();\n    setStatus(prevStatus => _objectSpread(_objectSpread({}, prevStatus), {}, {\n      submitting: true\n    })); // 3. Send a request to our API with the user's email address.\n\n    const res = await fetch('/api/subscribe', {\n      body: JSON.stringify({\n        email: inputEl.current.value\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    }); //for mailChimp integration\n\n    const {\n      error\n    } = await res.json();\n    handleMailChimpResponse(error, 'Success! ðŸŽ‰ You are now subscribed to the newsletter.'); // For sendGrid integration\n\n    const text = await res.text();\n    handleSendGridResponse(res.status, text);\n  };\n\n  return jsx(\"section\", null, jsx(Container, null, jsx(Box, {\n    sx: styles.contentBox\n  }, jsx(Box, {\n    sx: styles.contentBoxInner\n  }, jsx(Heading, {\n    as: \"h2\",\n    sx: styles.title\n  }, \"Subscribe to our Blog\"), jsx(Text, {\n    as: \"p\",\n    sx: styles.description\n  }, \"Lorem ipsum dolor sit amet consectetur adipisicing elitsed eiusmod tempor incididunt labore dolore.\"), jsx(\"form\", {\n    onSubmit: subscribe\n  }, jsx(Flex, {\n    sx: styles.subscribeForm\n  }, jsx(\"label\", {\n    htmlFor: \"email\",\n    sx: {\n      variant: 'styles.srOnly'\n    }\n  }, \"Email Address\"), jsx(Input, {\n    ref: inputEl,\n    id: \"email\",\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Enter your email address\"\n  }), jsx(\"div\", null, status.info.error && jsx(\"div\", {\n    className: \"error\"\n  }, \"Error: \", status.info.msg), !status.info.error && status.info.msg && jsx(\"div\", {\n    className: \"success\"\n  }, status.info.msg)), jsx(Button, {\n    type: \"submit\",\n    disabled: status.submitting,\n    className: \"subscribe__btn\",\n    \"aria-label\": \"Subscribe\"\n  }, !status.submitting ? !status.submitted ? 'Subscribe' : 'Submitted' : 'Submitting...')))))));\n}\nconst styles = {\n  contentBox: {\n    backgroundColor: 'primary',\n    textAlign: 'center',\n    borderRadius: 10,\n    py: ['60px', null, 8]\n  },\n  contentBoxInner: {\n    width: ['100%', null, '540px', '600px'],\n    mx: 'auto',\n    mt: -1,\n    px: [3, 5]\n  },\n  title: {\n    fontSize: ['24px', null, '28px', null, null, '32px', null, '36px'],\n    color: 'white',\n    lineHeight: [1.3, null, null, 1.25],\n    fontWeight: '700',\n    letterSpacing: ['-.5px', null, '-1.5px'],\n    mb: [2, 3]\n  },\n  description: {\n    fontSize: ['15px', 2, null, null, null, '17px', null, 3],\n    color: 'white',\n    lineHeight: [1.85, null, null, 2],\n    px: [0, null, 5]\n  },\n  subscribeForm: {\n    mt: [6, null, null, 7],\n    backgroundColor: ['transparent', 'white'],\n    borderRadius: [0, 50],\n    overflow: 'hidden',\n    p: [0, 1],\n    flexDirection: ['column', 'row'],\n    '[type=\"email\"]': {\n      border: 0,\n      borderRadius: 50,\n      fontFamily: 'body',\n      fontSize: ['14px', null, 2],\n      fontWeight: 500,\n      color: 'heading',\n      py: 1,\n      px: [4, null, 6],\n      backgroundColor: ['white', 'transparent'],\n      height: ['52px', null, '60px'],\n      textAlign: ['center', 'left'],\n      '&:focus': {\n        boxShadow: '0 0 0 0px'\n      },\n      '::placeholder': {\n        color: 'primary',\n        opacity: 1\n      }\n    },\n    '.subscribe__btn': {\n      flexShrink: 0,\n      ml: [0, 2],\n      backgroundColor: ['text', 'primary'],\n      mt: [2, 0],\n      py: ['15px']\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}